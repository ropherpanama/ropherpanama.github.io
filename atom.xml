<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[El blog del xobi]]></title>
  <link href="http://ropherpanama.github.io/atom.xml" rel="self"/>
  <link href="http://ropherpanama.github.io/"/>
  <updated>2015-10-08T14:06:43-05:00</updated>
  <id>http://ropherpanama.github.io/</id>
  <author>
    <name><![CDATA[Rosendo Peña Hernández]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[7 Python: Conexiones a Base De Datos]]></title>
    <link href="http://ropherpanama.github.io/blog/2015/10/08/7-python-conexiones-a-base-de-datos/"/>
    <updated>2015-10-08T13:55:17-05:00</updated>
    <id>http://ropherpanama.github.io/blog/2015/10/08/7-python-conexiones-a-base-de-datos</id>
    <content type="html"><![CDATA[<p>Una parte importante y lo más real en casi todo entorno de trabajo automatizado, es la <strong>interacción con una base de datos</strong> (sea del tipo que sea).
Para este fin <strong>Python</strong> nos ofrece una manera sencilla de trabajar con bases de datos.</p>

<!--more-->


<p>Debemos tomar en cuenta la versión de <strong>Python</strong> que estemos usando para instalar la líbreria específica para la base de datos que estemos usando.</p>

<blockquote><p>Usé Oracle XE 11g para este ejemplo</p></blockquote>

<p>Vamos a ver un programa que realiza una tarea muy común:</p>

<ol>
<li>Conectarse a una base de datos</li>
<li>Consultar una tabla</li>
<li>Exportar los resultados a un archivo de texto</li>
</ol>


<p><strong>Increíble</strong> que esto lo podamos hacer con tan pocas líneas. Y en esta ocasión colocaré imágenes en vez de texto (<strong>adiós copy/paste</strong>) hahaha, veamos qué tal.</p>

<p><img src="http://1.bp.blogspot.com/-96Wm8t-t_zM/U4-UoRMgVwI/AAAAAAAAASA/6yCkRSNbdg8/s1600/Screenshot+-+04_06_2014+,+04_48_11+p.m..png" alt="enter image description here" /></p>

<p>Vemos que en las primeras líneas estamos haciendo un <strong>import</strong> de componentes externos, en este caso tenemos que instalas el módulo <strong>cx_Oracle</strong> que nos permite trabajar con bases de datos <strong>Oracle</strong>, para casos en que uses <strong>PostgreSQL</strong>, <strong>MySQL</strong>, <strong>SQLite</strong> deberás buscar el módulo adecuado y seguir los pasos de su instalación, tomar en cuenta que los módulos de base de datos van de acuerdo a la <strong>versión de Python</strong> que estés usando.</p>

<p>Otro punto importante es notar que podemos especificar un <strong>name</strong> a nuestro gusto (<em>cx_Oracle as ora</em>) eso ayuda cuando el nombre del módulo que importamos tiene un nombre muy largo.</p>

<p>Con <strong>makedsn</strong> construimos una cadena de conexión para el método <strong>connect</strong>, vemos que el primer parámetro es el <strong>IP</strong> del servidor de la BDD, segundo el <strong>puerto</strong>, y tercero el <strong>nombre de la base de datos</strong> (SID por ejemplo).</p>

<p>Una vez teniendo el <strong>dsn</strong> nos conectamos con el <strong>user/password</strong> de la base de datos.</p>

<p>Estando conectados podemos ejecutar <strong>DML</strong> y extraer datos, en este caso volcamos los resultados a un archivo de texto llamado <strong>&ldquo;tablares.txt&rdquo;</strong></p>

<p>Al ejecutar el programa deberas ver lo siguiente:</p>

<p><img src="http://4.bp.blogspot.com/-gfnG_eVufwk/U4-Uok-NRSI/AAAAAAAAAR8/LugJRMIyqzM/s1600/Screenshot+-+04_06_2014+%252C+04_48_45+p.m..png" alt="enter image description here" /></p>

<p>En donde <em>11.2.0.1.0</em> es la versión de mi base de datos y seguido el tiempo que tomo el proceso en crear el archivo de texto con todos los registros.</p>

<p>Luego podremos ver que se ha creado el archivo de texto <strong>&ldquo;tableres.txt&rdquo;</strong></p>

<p><img src="http://1.bp.blogspot.com/-B4SyMowJlLA/U4-UoqNY8CI/AAAAAAAAASE/RLkL-p_fDA8/s1600/Screenshot+-+04_06_2014+%252C+04_49_08+p.m..png" alt="enter image description here" /></p>

<p>Espero que les ayude, ya saben que bienvenidas son las preguntas!</p>

<p>Debemos estar de acuerdo en que para ambientes productivos, realizar una tarea como esta y en esta forma puede ser vista muy <strong>&ldquo;newbie&rdquo;</strong>, es decir; no es bien visto que escribamos codigo SQL
de plano en nuestro código y tampoco que una sola clase haga todo. Es importante modularizar, <strong>Python</strong> al igual que <strong>Java</strong> nos permite crear <strong>&ldquo;paquetes&rdquo;</strong> con diferentes módulos
que pueden encapsular tareas muy particulares pero que también son repetitivas. Como sugerencia para este tipo de procesos (conexiones a base de datos), he visto que me
funciona muy bien usar un componente <strong>ORM</strong> como <a href="http://www.sqlalchemy.org/">SQLAlchemy</a></p>

<p>Un saludo!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[6 Python: Definiendo Clases]]></title>
    <link href="http://ropherpanama.github.io/blog/2015/10/08/6-python-definiendo-clases/"/>
    <updated>2015-10-08T13:50:22-05:00</updated>
    <id>http://ropherpanama.github.io/blog/2015/10/08/6-python-definiendo-clases</id>
    <content type="html"><![CDATA[<p>Para este programa vamos a ver que tal se maneja el concepto de <strong>Clase</strong> con Python, revisemos línea a línea el siguiente programa para ver a que corresponde cada una.</p>

<blockquote><p>Como siempre te invito a copiar (a mano) las lineas que no tienen <strong>#</strong> por delante, ya que como sabemos son comentarios que el compilador ignora.</p></blockquote>

<!--more-->


<p>Este programa escribirá todo lo que el usuario le envíe por consola en un archivo de texto, terminará cuando el usuario escriba <strong>Adios</strong>.</p>

<pre><code>#Una clase se define mediante la palabra clase class
class Archivo:
#Viniendo de Java lo primero que intente ubicar fue un constructor, en el caso de python, este se define como __init__, y algo muy importante es nunca olvidar
#el parametro self, de olvidarlo veras algo como "TypeError: function() takes 0 positional arguments but 1 was given".
#self viene a ser algo asi como el this de java, es decir los atributos de instancia que persisten a traves de la vida del objeto.
    def __init__(self, name, content):
        self.name = name
        self.content = content
        print("Archivo llamado ", name)

#En java tenemos la palabra private para indicar que un atributo o metodo es privado, en python esto lo podemos hacer para los metodos con un doble subrayado, 
#veremos que la forma de utilizar (llamar) estas funciones es un tanto diferente, no olvidar el parametro self
    def __escribir(self):
        t = input("Escriba &gt; ")
        self.content += "\n" + t

#Este metodo es normal, tal como lo habiamos visto en el programa 4
    def leer(self):
#Validamos el contenido del archivo antes de leerlo
        if len(self.content) == 0:
            print("Archivo no tiene contenido, escriba algo")
        else:
            print("cat " + self.name + "\n",self.content)


#Uso de la clase
#Vamos a instanciar un objeto de nuestra clase
#Recordar que arriba colocamos el metodo de inicializacion con los parametros de nombre del archivo y algo de contenido, notar que el self no debe ser cargado por 
#nosotros
a = Archivo("CV.doc", "")

#Ofrecemos las instrucciones, notar que con triple doble comilla podemos imprimir lineas tal cual como las escribimos en el fichero de fuente.
print("""Escriba:
    e para escribir
    l para leer
    bye para salir""")

#Entramos a un blucle infinito, que se encargara de interactual con el usuario 
while True:
    r = input("&gt; ")
    if r == "bye":
        print("Adios")#Si el usuario escribe Adios salimos del programa
        break
    elif r == "e":
#Observar el llamado a la funcion que definimos privada, a es el identificador de la instancia, seguido de un underline y el nombre de nuestra clase (Archivo) doble 
#subrayado y el nombre de nuestra funcion.
        a._Archivo__escribir()#Llamado a una funcion privada
    elif r == "l":
        a.leer()
    else:
        print("Opcion no valida")
</code></pre>

<p>Bueno, eso ha sido todo por hoy. Ya podemos definir clases, sabemos como instanciarlas y construir inicializadores según las necesidades de nuestro objeto.</p>

<p>Podemos acceder a funciones privadas y públicas de una clase.</p>

<p>Un saludo, bienvenidas son las preguntas!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Python: Funciones]]></title>
    <link href="http://ropherpanama.github.io/blog/2015/10/08/5-python-funciones/"/>
    <updated>2015-10-08T13:46:44-05:00</updated>
    <id>http://ropherpanama.github.io/blog/2015/10/08/5-python-funciones</id>
    <content type="html"><![CDATA[<p>Para el cuarto programa vamos a ponernos interactivos, vamos a crear un programa que nos diga nuestra edad, <strong>muy sencillo</strong>, pero nos servirá para entender mejor la captura de datos por teclado y lo más importante, definir y utilizar funciones (métodos).</p>

<p>Voy a <strong>#comentar</strong> todo entre líneas para que se entienda mejor.</p>

<!--more-->


<blockquote><p>Como de costumbre puedes escribir (<strong>sí escribir</strong>, no copy/paste) este código en tu IDLE de Python y ejecutarlo con F5</p></blockquote>

<pre><code>#Mi cuarto programa Python
#Si se abre con IDLE, ejecutar con la tecla F5

#Funciones

#Vamos a definir una fincion, su nombre es calcularEdad (a python no le gustan las mayusculas, pero es que vengo de Java entiéndanme)
#Esta función o metodo va a recibir un argumento, fijense que no estamos especificando el tipo del argumento, simplemente va porque vá, queda de nosotros
#manipular este dato en nuestro código, en este ejemplo; como lo vamos a recibir de input() por seguridad lo pasamos a string con str()
#la función no retorna cosa alguna, solo nos imprime nuestra edad
def calcularEdad (anio_nacimiento):
    print("Tu edad es " + str(2015 - anio_nacimiento) + " años")

#la variable entrada tendra valor capturado por teclado, esto se logra con la función input()
entrada = input("Ingrese su año de nacimiento ")

#Vamos a llamar a nuestra función creada anteriormente con el valor que tomamos de entrada
calcularEdad(int(entrada))

#Bien, ahora que vimos funciones sin retorno (tipo void) vamos a ver funciones que retornen algo
#nuevamente fue muy extraño para mi no tener la necesidad de definir qué es lo que debo retornar en mi función, simplemente con colocar la palabra return 
#estamos indicando que la función retorna algo, en nuestro ejemplo retorna un entero (nuestra edad)
def calcularEdad2 (anio):
    return 2014 - anio

#Nuevamente vamos a tomar entrada desde el teclado para ejecutar nuestra función
entrada2 = input("Ingrese su año de nacimiento ")

#Vemos que para este caso, como la funcion retorna, podemos almacenar su valor retornado en una variable (answer)
answer = calcularEdad2(int(entrada2))
#Imprimimos la variable answer que  es la que posee el valor que retorno la funcion
print("Tu edad es " + str(answer) + " años")

#Numero variable de parametros en una funcion
#Tal como lo indica la documentacion https://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions
#una funcion puede definirse para que tome una cantidad de argumentos variable, si bien es cierto en este ejemplo obligatoriamente estamos definiendo que 
#se le deben enviar 2 argumentos (por arg1 y arg2), el tercer parametro puede ser una tupla o un diccionario, esto lo sabemos por el argumento *arg3.
#Si la tupla no contiene valor alguno no se imprimirá nada que inicie con Item: o en el print de abajo, prueba colocarle algo a ver que pasa :)

def variable(arg1, arg2, *arg3):
    for s in arg3:
        print("Item: " + str(s))

    print(arg1, arg2, arg3)


a = input("Ingrese un numero ")
b = input("otro ...")

#array = [23,22,21,20] #lista extra #descomenta esta linea para enviarle una lista a la funcion
#variable(int(a), int(b), array) # esta tambien si le pasas la lista
variable(int(a), int(b))
</code></pre>

<p><strong>En resumen</strong></p>

<p>Muy importante y <strong>si eres observador</strong>, habrás notado que las funciones se definen con la palabra <strong>def</strong>.</p>

<p>Lo demás está explicado no?, las preguntas son bienvenidas!</p>

<p>Recuerden ir a descubrir mucho mas en la <a href="https://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions">Documentación</a></p>

<p>Saludos!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4 Python: Sentencias De Flujo]]></title>
    <link href="http://ropherpanama.github.io/blog/2015/10/08/4-python-sentencias-de-flujo/"/>
    <updated>2015-10-08T13:41:01-05:00</updated>
    <id>http://ropherpanama.github.io/blog/2015/10/08/4-python-sentencias-de-flujo</id>
    <content type="html"><![CDATA[<p>Para el tercer programa, decidí fijarme en las sentencias de flujos (las más comunes), recomiendo revisar la <a href="https://docs.python.org/3/tutorial/controlflow.html">Documentación</a> ya que hay muchas <strong>cosas interesantes</strong>.</p>

<p>Una de las cosas que puede llegar a romperte la cabeza son las identaciones del código que pertenece, por ejemplo a un <code>if</code>, <code>while</code>, <code>for</code>, etc. ya que al no requerir llaves para definir los bloques de código, debemos tener sumo cuidado con las <strong>tabulaciones</strong>.</p>

<!--more-->


<p><strong>No es lo mismo</strong></p>

<pre><code>for i in range(5):
print(i)
print("boo")
</code></pre>

<p><strong>que</strong></p>

<pre><code>for i in range(5):
    print(i)
print("boo")
</code></pre>

<p>pueden ejecutarlo si gustan, en fin; otra cosa importante es recordar que los dos puntos <strong>(:)</strong> denotan el inicio de la sentencia de flujo, poner atención a ello en el siguiente código:</p>

<pre><code>#****************************************************************
#Mi tercer programa Python
#Si se abre con IDLE, ejecutar con la tecla F5

#Sentencias de flujo

#IF
a = 10
b = 70

#Importante: las sentencias a ejecutar segun se cumpla la condicion o no; debe
#identarse con un Tab
if (b/a) &gt; 5 :
    print("Alcanza para todos")
    print("tenemos", 70/10)
else:
    print("No alcanza para todos")

#WHILE
#Se pueden omitir los parentesis de la condicion
count = 0

print("Uso del while")
while ( count &lt;= 5 ):
    count += 1
    print("Imprimo " + str(count) + " veces")

#Entrada por teclado con input(""),
#en Python 3 se elimino el raw_input()

print ("While infinito, escribe adios para salir")

while True:
    entrada = input("&gt; ")
    if entrada == "adios":
        break
    else:
        print (entrada)

#FOR
#Similar a Java se puede iterar sobre objetos sin necesidad de un contador

secuencia = ["uno","dos","tres","cuatro","cinco"]

for e in secuencia:
    print("Salgo en " + e)
#****************************************************************
</code></pre>

<p><strong>En resumen:</strong></p>

<p>Muy importante tener en cuenta los dos puntos <strong>(:)</strong> y las <strong>tabulaciones</strong> para los bloques de código, es vital esto, porque los métodos o funciones funcionan de igual forma.</p>

<p>Los que estamos acostumbrados a <strong>C</strong> o <strong>Java</strong> vamos; por inercia a utilizar <strong>paréntesis</strong> en las condiciones <code>if (1 == i)</code>, pero acá los puedes omitir <code>if 1 == i</code></p>

<p>Vimos el uso de la función <strong>str</strong> (<code>print("Imprimo " + str(count) + " veces")</code>) sin esto no podríamos concatenar el entero al resto de la cadena.</p>

<p>Otra cosa importante, y que me tomó algo de tiempo darme cuenta, era que en <strong>Python 3</strong> se eliminó la función <strong>raw_input()</strong> para procesar la entrada del teclado, desde <strong>Python 3.x</strong> en adelante debemos usar <strong>input()</strong></p>

<p>Descubrí que los <strong>for</strong> son bastante resumidos en comparación con otros lenguajes.</p>

<p>Recuerden revisar la <a href="https://docs.python.org/3/tutorial/controlflow.html">¡Documentación!</a>
Saludos!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 Python: Listas, Tuplas Y Diccionarios]]></title>
    <link href="http://ropherpanama.github.io/blog/2015/09/29/python-dia-tres/"/>
    <updated>2015-09-29T16:17:16-05:00</updated>
    <id>http://ropherpanama.github.io/blog/2015/09/29/python-dia-tres</id>
    <content type="html"><![CDATA[<p>Para el segundo programa vamos a ver las listas, tuplas y diccionarios.
En este punto existen varias cosas interesantes, como la <strong>búsqueda por rangos</strong>, la <strong>búsqueda de atrás hacia adelante</strong> en una lista, y la <strong>búsqueda con saltos</strong> (no sé como decirle exactamente).</p>

<p>Vamos a verlo en el siguiente código.</p>

<!--more-->


<p>Cópialo y pégalo en el IDLE de Python y pínchale a F5.</p>

<pre><code>#****************************************************************
#Mi segundo programa Python
#Si se abre con IDLE, ejecutar con la tecla F5

#Listas (arrays o vectores)
lista1 = [1, 2, "tres", 4, "cinco", [2,3], 7, "ocho", "nueve", 10]

print("Accediendo a la lista:", lista1[2])
#La sublista esta en el index 5 de la lista principal, accedemos al primer valor
#de ella (sublista)
print("Accediendo a la sublista:", lista1[5][0])

print("Lista original:", lista1)
lista1[0] = 100
print("Modifico 1er elemento (1 por 100):", lista1)

#Uso de numero negativo (busqueda inversa)
#Buscará la 3 posicion de atras hacia adelante de la lista
print(lista1[-3])

#Uso de Slicing (particionado) o busqueda por rango
print(lista1[0:4])

#Uso de saltos (cada n cantidad)
#Buscara solo en la posicion 0 a la 8, saltando 3 elementos en cada item encontrado
print(lista1[0:8:3])

#Tuplas
#Se pueden manejar a las listas
#La gran diferencia es que las tuplas son inmutables
#tupla1[1] = 100 (TypeError: 'tuple' object does not support item assignment) #este es el error que dá si intentas cambir algo, lo puedes descomentar para que lo vivas :)
tupla1 = (1,2,3,4,5)
print("Tupla:", tupla1[:3])

#Diccionarios, la misma vaina que los HashMaps de JAVA :)
diccionario = {"uno":1, "dos":2, "tres":3}
print("Diccionario:", diccionario["uno"])

#****************************************************************
</code></pre>

<p><strong>En resumen:</strong></p>

<p>Crear una lista es bastante sencillo, de igual forma acceder a sus elementos.</p>

<p>Si bien las tuplas pueden ser manipuladas como una lista para su consulta, la gran diferencia es que las tuplas son <strong>inmutables</strong>, es decir; que son como una especie de <strong>constante</strong>, no podemos cambiar los valores que les asignemos al crearlas.</p>

<p>Listas se crean con [], las tuplas se crean con ()</p>

<p>Y pues los diccionarios son una estructura de <strong>clave = valor</strong> en la que los valores se acceden por el nombre de la clave, similar a los <strong>HashMaps</strong> de <strong>Java</strong>.
De igual manera, aunque no lo puse aquí (y obviamente) podemos hacer pruebas de recorridos con un for, que por cierto lleva abreviadas muchas cosas para los que estamos acostumbrados a los <strong>for</strong> de <strong>C</strong> o los antiguos de <strong>Java</strong>.</p>

<p>Un saludo a todos!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2 Python: Primer Contacto]]></title>
    <link href="http://ropherpanama.github.io/blog/2015/09/29/python-dia-dos/"/>
    <updated>2015-09-29T16:14:29-05:00</updated>
    <id>http://ropherpanama.github.io/blog/2015/09/29/python-dia-dos</id>
    <content type="html"><![CDATA[<p>Este fué mi primer programa con <strong>Python</strong>, muy simple realmente. Comento entre líneas lo que estaba haciendo (recordar que los comentarios inician con #)
Copia el contenido a continuación (te sería más instructivo escribirlo pero bueno &hellip;) y pégalo en el <strong>IDLE</strong>, ejecútalo con <strong>F5</strong></p>

<!--more-->


<pre><code>#*****************************************************************************
#Mi primer programa Python
#El print recibe cualquier cantidad de parametros separados por coma (,)
#incluyendo expresiones aritmeticas como se muestra a continuacion.
#Si se abre con IDLE, ejecutar con la tecla F5

print ("Si sumas 2 + 3 el resultdo es ",
       2 + 3,
       "\nPero si los restas el resultado es ",
       2 - 3,
       "\nQue cosa no?")

#Variables
#No necesitas declarar de qué tipo son, sólo se declaran (tipo dinamico)
a = "Soy una cadena de texto"
b = 50
c = 25

print(a, "\nOperacion:", b + c)

c = "Como los tipo son dinamicos, puedes cambiar el tipo de dato de tu variable en tiempo de ejecución"
print(c) #Notar que c era un entero (25)

multilinea = """ Esto es cool
                 puedo escribir lineas sin usar carracteres de escape
                 solamente usando las comillas triples :)"""

print(multilinea)

#Las cadenas tambien aceptan operaciones aritmeticas
#Es decir que puedes multiplicar o sumar cadenas de texto
d = "eco"
e = d * 3
f = "sistema"
print("Multiplicacion de cadenas:", e)

e = d + f
print("Suma de cadenas:", e)
#*****************************************************************************
</code></pre>

<p><strong>En resumen:</strong></p>

<p>Es bastante agradable el método <strong>print</strong>, ya que acepta lo que le pongas y como lo pongas (salvo el caso de los enteros y lo que no sea string.</p>

<p>Pero tranquilo! tenemos el método <strong>str()</strong> que transforma a <strong>string</strong> lo que le pongas :)</p>

<blockquote><p>Ej.: print(str(25))</p></blockquote>

<p>Vimos que los tipos de datos son dinámicos (<strong>c</strong> era un entero y luego era un string)</p>

<p>Vimos los textos multilínea con <code>""" """"</code>, útil si no se quiere usar el clásico <code>\n</code> (que puede ser usado).
Y vimos la multiplicación de cadenas, por aquí nos vamos a ver que más encontramos con <strong>Python</strong>.</p>

<p>Un saludo! Cualquier duda, pues a la orden!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python: Día 1]]></title>
    <link href="http://ropherpanama.github.io/blog/2015/09/29/python-dia-uno/"/>
    <updated>2015-09-29T16:12:06-05:00</updated>
    <id>http://ropherpanama.github.io/blog/2015/09/29/python-dia-uno</id>
    <content type="html"><![CDATA[<h3>Aprender Python</h3>

<p>Bueno, hace algunos días decidí hacer cosas con <strong>Python</strong> para ver que tal, ya que quería aprender un nuevo lenguaje y me decidí por él.
En mi caso venía de trabajar puramente con <strong>Java</strong> y para mi sorpresa las diferencias son muchas (jejeje lógico no?), pero hay unas que me agradaron muchas.</p>

<p>Visto desde el punto de vista de la <strong>línea</strong> de aprendizaje pues hacer un programa algo complejo (Conexión a base de datos con Oracle usando <strong>ORM SQLAlchemy</strong>) no me tardó mucho.</p>

<!--more-->


<p>Aunque atribuyo eso a que ya conocía un lenguaje orientado a objetos y que algunas cosas; pues son muy similares funcionalmente.</p>

<p>Si me percaté de <strong>ciertas diferencias</strong> muy notables que dejo a continuación:</p>

<ol>
<li><strong>No tienes que &ldquo;tipar&rdquo;</strong> (definir un tipo de dato) tus variables, el tipo de datos de las mismas es dinámico, es decir que según como la uses el tipo de dato de tu variable cambiará.</li>
<li>Los bloques de código <strong>no se cierran con llaves</strong>, en el caso del <code>for</code> y demás cosas por el estilo, se debe tabular el código (perfecto para mí porque tengo la tecla de la llave cerrando dañada :D)</li>
<li>Las funciones se declaran con la palabra <strong>def</strong> y aunque la función o método retorne datos no necesitas especificarlo en la definición de la función.</li>
<li>Debido a lo anterior y a lo del tipo dinámico de datos, la característica de POO sobre polimorfismo pierde un poco su lugar jejejjeeje.</li>
<li>Hablando de <strong>métodos y constructores</strong> todos (nunca se te olvide) llevan el parametro <strong>self</strong>, que es una forma como de <strong>this</strong> (de Java)</li>
<li>Para imprimir solo usa <strong>print</strong>!!! (no como ese largo <code>System.out.println</code> balalalalala &hellip;. )</li>
<li>Existe el <strong>try/except</strong> en vez de <strong>try/catch</strong></li>
<li>Leer y escribir archivos &hellip; qué les puedo decir &hellip; <strong>es muy fácil!</strong></li>
<li>Conectarte a una base de datos también es muy fácil, solo debes buscar los módulos indicados :)</li>
<li>La herencia es <strong>multiple</strong>!!!</li>
<li><strong>No!</strong> Los comentarios no inician con <strong>//</strong>, inician con <strong>#</strong></li>
</ol>


<p>Bueno y sobre eso un montón de cosas más que aún voy descubriendo, pero por lo general han sido cosas muy buenas e interesantes y se puede decir que ya le tengo cariño.</p>

<p>Antes de iniciar, pues lógicamente debemos <a href="https://www.python.org/downloads/">instalar</a> <strong>Python</strong> en nuestra máquina para poder usar la <strong>consola interactiva</strong> (!Si, consola interactiva!)</p>

<p>Partí con <strong>Python 3.3</strong>, entiendo que va por la 3.4 (o quizá más adelante) pero bueno habrá que revisar, ya que mi primer tropiezo fué leer la documentación de <strong>Python 2.x</strong> y darme cuenta que el <strong>print</strong> se convirtió en un <strong>método</strong>, por ende se debía llamar con parentesis <strong>print()</strong>.</p>

<p>Para <strong>Windows</strong> es fácil, solo descárgate el instalador, lo instalas (valga la redundancia) y en tu menú de programas aparecerá <strong>Python 3.3</strong> (o la versión que instales), para mi fué más bonito usar la opción <strong>IDLE</strong> (Python GUI) que está dentro del menú <strong>Python 3.3</strong>, con este puedes ejecutar tu código presionando la tecla <strong>F5</strong></p>

<p>Si te gustaría empezar con un IDE, pues <a href="https://www.jetbrains.com/pycharm/download/">PyCharm</a> está muy bien.</p>

<p>Saludos!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Llamando Un Programa en Java Desde Un Programa en C]]></title>
    <link href="http://ropherpanama.github.io/blog/2015/09/29/llamar-java-desde-c/"/>
    <updated>2015-09-29T16:05:15-05:00</updated>
    <id>http://ropherpanama.github.io/blog/2015/09/29/llamar-java-desde-c</id>
    <content type="html"><![CDATA[<blockquote><p>Vamos a usar un script para Linux/Unix, prueba con Windows y un bat a ver que tal</p></blockquote>

<p>Intenté varias formas, al final me incliné por hacer un script de Unix y que éste contenga la serie de configuraciones que requiere mi programa Java; desde un programa en C, llamaremos al Script de Unix y éste llamará al programa Java.</p>

<!--more-->


<h3>Paso 1: Crear una clase</h3>

<pre><code>public class Hola
{
  public static void main(String []args)
  {
    System.out.println("I'm saying Helloooo!!!");
  }
}
</code></pre>

<h3>Paso 2: Crear un Script (lo llamaremos &ldquo;exe&rdquo;)</h3>

<pre><code>url=`which java`

$url Hola &gt; salida

if [ $? -eq 0 ]
then
   echo 'El programa se ejecuto...'
else
   echo 'El programa no se ejecuto'
fi

more salida
</code></pre>

<p>Guardar el archivo (yo le puse &ldquo;exe&rdquo;) y darle sus respectivos permisos de ejecución <code>(chmod +x exe)</code></p>

<h3>Paso 3: Crear el programa en C</h3>

<pre><code>#include &lt;stdlib.h&gt;

int main(void)
{
   int result;
   result = system("exe");
}
</code></pre>

<p>Como vemos, el programa en C ejecuta (con la función <code>system</code> ) el script <code>exe</code>, que es quién configura todo para que se ejecute nuestro programa java.</p>

<p>Compilar el programa java:</p>

<pre><code>javac Hola.java
</code></pre>

<p>Compilar el C, <strong>cc</strong> es el compilador de C por defecto en sistemas <strong>Linux</strong>:</p>

<pre><code>cc callJava.c (o el nombre que ustedes le pongan)
</code></pre>

<p>Salida de los programas:</p>

<pre><code>userhome/user/ejemplo&gt; a.out
El programa se ejecuto...
I'm saying Helloooo!!!
userhome/user/ejemplo&gt;
</code></pre>

<p>A todos un saludo!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Píldoras De Oracle]]></title>
    <link href="http://ropherpanama.github.io/blog/2015/09/29/pildoras-de-oracle/"/>
    <updated>2015-09-29T15:20:01-05:00</updated>
    <id>http://ropherpanama.github.io/blog/2015/09/29/pildoras-de-oracle</id>
    <content type="html"><![CDATA[<p>En este artículo publico pequeños tips relacionados a Oracle, PLSQL, configuraciones, etc. En fín, todo lo interesante que vaya encontrando.</p>

<!--more-->


<h2>1. PLSQL SELECT INSERT</h2>

<p>Hace algunos días tuve un apuro y me solicitaron crear un codigo en PLSQL para seleccionar datos de varias tablas y sintetizarlos (insertarlos) en otra.
Les muestro lo que me saco del apuro, saludos!</p>

<blockquote><p>Script válido para Oracle</p></blockquote>

<pre><code>    Declare
       Cursor NOMBRE_CURSOR Is
            Select  
            SCAMPO_1, SCAMPO_2, SCAMPO_3
            From TABLA
            Where ... SI LO NECESITAN
            And ... SI LO NECESITAN
            .... MAS VALIDACIONES
       CUALQUIER_NOMBRE NOMBRE_CURSOR%Rowtype;
     Begin
       For CUALQUIER_NOMBRE In NOMBRE_CURSOR
       Loop
         Insert Into TABLA_DESTINO (CAMPO_1, CAMPO_2, CAMPO_3 ...) Values
           (CUALQUIER_NOMBRE.SCAMPO_1 , CUALQUIER_NOMBRE.SCAMPO_2, CUALQUIER_NOMBRE.SCAMPO_3 ...);
       End Loop;
     End;
</code></pre>

<p>Esto se puede ejecutar en algún SGDBD o desde un terminal.</p>

<h2>2. ORA-01843: not a valid month</h2>

<p>Si lo has intentado todo y nada te funciona, si revisas y revisas y todo está bien&hellip; haz esto:
Véte al <code>regedit</code>, en <code>Software</code> busca <code>ORACLE</code>, estando allí dale click a <code>KEY_XE</code> y según tu caso editarás el campo <code>NLS_LANG</code>.</p>

<p>Mi error se daba por esto:</p>

<pre><code>TO_DATE('1-Dec-2011 00:00:00','DD-MON-YYYY HH24:MI:SS')
</code></pre>

<p>Oracle no entendia el <code>Dec</code> (es que el mío no es gringo), el entiende <code>Dic</code>.</p>

<p>Puesto que en esa clave tenía este valor:</p>

<p><code>LATIN AMERICAN SPANISH_PANAMA.WE8MSWIN1252</code></p>

<p>Para &ldquo;americanizarlo&rdquo; coloca en <code>NLS_LANG</code> esto:</p>

<p><code>AMERICAN_AMERICA.WE8ISO8859P1</code></p>

<h2>3. Exports Oracle</h2>

<p>Podemos exportar datos con Oracle utilizando esta secuencia de comandos; solo debes reemplazar los valores <code>user</code>, <code>passwd</code>, <code>owner</code>, <code>file</code> y <code>log</code>.</p>

<p>En este caso solo estamos exportando los objetos de un esquema en particular (<code>owner</code>).</p>

<p><code>exp user/passwd@sid owner=esquema file = nombre_archivo.dmp log=arch_log.log</code></p>

<p><strong>En donde:</strong></p>

<ul>
<li><strong>user</strong>: usuario de base de datos</li>
<li><strong>passwd</strong>: contraseña del usuario</li>
<li><strong>owner</strong>: dueño del esquema que vamos a exportar</li>
<li><strong>file</strong>: nombre del archivo de salida producto del export</li>
<li><strong>log</strong>: archivo en donde se almacenará toda la salida (debug) del proceso</li>
</ul>


<p>Más info aquí: <a href="http://www.oracle-dba-online.com/export_and_import.htm" title="Import y Exports">&ldquo;Artículo&rdquo;</a></p>

<p>Seguro que esto va a ir creciendo. <strong>Un saludo a todos!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux: Comandos Que Me Facilitan La Vida!]]></title>
    <link href="http://ropherpanama.github.io/blog/2015/09/29/comanteca-linux/"/>
    <updated>2015-09-29T11:42:53-05:00</updated>
    <id>http://ropherpanama.github.io/blog/2015/09/29/comanteca-linux</id>
    <content type="html"><![CDATA[<p>En este artículo iré colocando comandos (o secuencias de ellos) <strong>válidos para Linux</strong> que de alguna manera me saquen de un apuro o sean interesantes.</p>

<!--more-->


<ol>
<li><strong>Promedio del peso de los archivos en una carpeta, el peso se muestra en KB:</strong>
<em><em>* </em>ls -l | gawk &lsquo;{sum += $5; n++;} END {print sum/n/1024 &ldquo; KB&rdquo;}</em></li>
<li><strong>Listar archivos con su peso en KB:</strong>
<em><em>* </em>ls -lh</em></li>
<li><strong>Mostrar el total de archivos de una carpeta:</strong>
<em><em>* </em>ls | wc -l</em></li>
<li><strong>Ejecutar un comando, ver la salida por terminal y a la vez guardarla en un archivo:</strong>
<em><em>* </em>{comando} | tee salida.log</em></li>
<li><strong>Buscar archivo a partir de un directorio en sus subdirectorios:</strong>
<em><em>* </em>find . -name FILE.ext</em></li>
</ol>


<p>Esta lista se irá actualizando con más comandos útiles.
Saludos!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Unable to Execute Dex: Multiple Dex Files]]></title>
    <link href="http://ropherpanama.github.io/blog/2015/09/29/android-dex-multiple-libs/"/>
    <updated>2015-09-29T11:38:22-05:00</updated>
    <id>http://ropherpanama.github.io/blog/2015/09/29/android-dex-multiple-libs</id>
    <content type="html"><![CDATA[<p>Este problema es bastante sencillo de solucionar, sólo hay que LEER (lo entendí después de una noche rompiendome la cabeza) en vez de GOOGLEAR.</p>

<p><strong>En mi caso el mensaje era este:</strong></p>

<blockquote><p>[2013-05-07 23:08:21 - Dex Loader] Unable to execute dex: Multiple dex files define Lcom/sun/jersey/api/json/JSONConfigurated;
[2013-05-07 23:08:21 - smf-prototype] Conversion to Dalvik format failed: Unable to execute dex: Multiple dex files define Lcom/sun/jersey/api/json/JSONConfigurated;</p></blockquote>

<p>Estoy trabajando en unos <strong>webservices</strong> que usan el soporte de <strong>JSON</strong> y para eso requiero un par de librerías.</p>

<!--more-->


<p></p>

<p>La clave está precisamente en el mensaje :</p>

<blockquote><p>com/sun/jersey/api/json/JSONConfigurated</p></blockquote>

<p>Al buscar entre las librerías que estaba usando para los asuntos de <strong>JSON</strong> (<code>jersey-json-1.16.jar</code> y <code>jersey-bundle-1.17.jar</code>) me dí cuenta que ambos JARs tienen la clase <code>JSONConfigurated</code> ubicada en el mismo paquete.</p>

<p><img src="http://1.bp.blogspot.com/-e_SS03hFSSw/UYpjIpX6A1I/AAAAAAAAAD0/BVAwux4Dfp4/s1600/json+1.png" alt="enter image description here" /></p>

<p><img src="http://3.bp.blogspot.com/-5to6ccF1tbk/UYpjlQhgYwI/AAAAAAAAAD8/GQu0Dwe-ABo/s1600/json+2.png" alt="enter image description here" /></p>

<p><strong>Solución</strong> : eliminar una de las librerías o usar un <code>bundle</code>, como en mi caso. En realidad sin saber había metido la otra librería (<code>jersey-json</code>) y por eso me tiraba el error, pero he visto en muchos lados que a la gente les pasa lo mismo con otras librerías.
Algunos borran las <strong>Dependencias de Android</strong> del <strong>build path</strong> (funciona pero si usas cosas como <strong>anotaciones de Android</strong> no es nada agradable), otros le hacen un simple <strong>Clean</strong> al proyecto, pero realmente el problema es este, debemos tener cuidado y control de las librerías que estamos incluyendo en nuestro proyecto, debemos fijarnos bien si las versiones que usamos son compatibles entre sí.</p>

<p>Un saludo!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android: Verificar Estado Del WIFI]]></title>
    <link href="http://ropherpanama.github.io/blog/2015/09/29/android-estado-del-apaptador-wifi/"/>
    <updated>2015-09-29T11:35:21-05:00</updated>
    <id>http://ropherpanama.github.io/blog/2015/09/29/android-estado-del-apaptador-wifi</id>
    <content type="html"><![CDATA[<p>Este es un tipo de funcionalidad que es bueno tenerla en una clase de utilidades globales (en otras palabras, en una clase de métodos estáticos).</p>

<p>Aveces es necesario conocer el estado del adaptador de red WIFI, para permitirle al usuario o a la misma aplicación realizar o no un proceso crítico del flujo de ejecución.</p>

<p>Como lo escribí arriba, hagamos una <strong>clase de utilidades</strong>, como la siguiente:</p>

<!--more-->


<pre><code>import android.content.Context;

public class SystemUtils {    
    public static boolean isWifiOn(Context context) {
        ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo ni = cm.getNetworkInfo(ConnectivityManager.TYPE_WIFI);

        if(!ni.isConnected()) return false; else return true;
    }
} 
</code></pre>

<p>Nuestro método <code>isWifiOn</code> nos retornará un <code>true</code> si el WIFI está encendido; un <code>false</code> en caso contrario. Lo que nos permite implementar una acción dependiendo del caso en el que sea llamada la función, por ejemplo:</p>

<pre><code>if(SystemUtils.isWifiOn(getApplicationContext()))
    Toast.makeText(getApplicationContext(), "WIFI está encendido", Toast.LENGTH_LONG).show(); 
else
    Toast.makeText(getApplicationContext(), "WIFI está apagado", Toast.LENGTH_LONG).show();
</code></pre>

<p>Noten que al ser un <strong>método estático</strong> lo podemos llamar sin instanciar la clase <code>SystemUtils</code>; pues lo podemos acceder mediante un llamado directo.</p>

<p>Otro punto muy importante, antes de ejecutar tu aplicación asegurate de que en el <strong>AndroidManifest.xml</strong> le estás cediendo los <strong>permisos</strong> a la aplicación para que pueda verificar el estado del adaptador.</p>

<pre><code>&lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/&gt; 
</code></pre>

<p>Espero les sirva, saludos!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android, ListView Dentro De Un ScrollView]]></title>
    <link href="http://ropherpanama.github.io/blog/2015/09/29/android-scrollview/"/>
    <updated>2015-09-29T11:32:20-05:00</updated>
    <id>http://ropherpanama.github.io/blog/2015/09/29/android-scrollview</id>
    <content type="html"><![CDATA[<p>Aveces, cuando desarrollas <strong>antes de leer las teorías</strong> pasan cosas como esta.
Hace algunos días, me encontré con una dificultad al desarrollar una aplicación Android; mi caso era el siguiente.
Quería que una de las pantallas de mi aplicación respondiera a los cambios de orientación que el usuario realizara a su teléfono, esto no es mayor problema, por defecto el <strong>manifest</strong> de la aplicación configura todas las actividades para que esto suceda. Mi problema era que en esa pantalla tenia un <code>ListView</code> que desplegaba una lista de productos. En modo vertical se veía perfecto el <code>ListView</code>, pero al girar el teléfono; al ser el espacio vertical más pequeño, no mostraba todos los componentes de la lista, porque quedaban escondidos al girar la pantalla.</p>

<!--more-->


<p><strong>La solución:</strong> Utilizar, en lugar de un <code>&lt;LinearLayout/&gt;</code> un <code>&lt;ScrollView /&gt;</code>, el problema:</p>

<blockquote><p><strong>NO SE PUEDE TENER UN LISTVIEW DENTRO DE UN SCROLLVIEW.</strong></p></blockquote>

<p>Bueno &hellip; con un pequeño truco si se puede, veamos:</p>

<p><strong>Mi actividad era algo así</strong></p>

<p><img src="http://4.bp.blogspot.com/-96MFYd6nWyk/UyvLJ4L7_QI/AAAAAAAAAIE/HwifvWIuSf4/s1600/cap1.PNG" alt="enter image description here" /></p>

<p>En lugar de tenerlo todo en un <code>LinearLayout</code>, debemos tener todo en un <code>ScrollView</code>, para que al girar el dispositivo podamos &ldquo;scrollear&rdquo; y poder ver todos los componentes de la GUI de la app.</p>

<p>Primero debemos crear nuestra propia clase que extienda de <code>ScrollView</code></p>

<pre><code>package com.example.layout.modified;

import android.content.Context;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.widget.ScrollView;

public class VerticalScrollView extends ScrollView {

  public VerticalScrollView(Context context) {
  super(context);
 }

  public VerticalScrollView(Context context, AttributeSet attrs) {
  super(context, attrs);
 }

  public VerticalScrollView(Context context, AttributeSet attrs, int defStyle) {
  super(context, attrs, defStyle);
 }

  @Override
 public boolean onInterceptTouchEvent(MotionEvent ev) {
  final int action = ev.getAction();
  switch (action) {
  case MotionEvent.ACTION_DOWN:
   super.onTouchEvent(ev);
   break;

   case MotionEvent.ACTION_MOVE:
   return false; // redirect MotionEvents to ourself

   case MotionEvent.ACTION_CANCEL:
   super.onTouchEvent(ev);
   break;

   case MotionEvent.ACTION_UP:
   return false;

   default:
   break;
  }

   return false;
 }

  @Override
 public boolean onTouchEvent(MotionEvent ev) {
  super.onTouchEvent(ev);
  return true;
 }
}
</code></pre>

<p>Con esta clase reescribimos el comportamiento de un <code>ScrollView</code> normal, y esto nos evitará el mal funcionamiento de nuestra app al querer hacer scroll sobre la pantalla. Tal cual como esta allí pueden copiarla.
El siguiente paso será utilizar en nuestro <strong>xml</strong> de la actividad nuestra Custom Class, así:</p>

<p><img src="http://4.bp.blogspot.com/-3Gpr-xXwfko/UyvLmlj0FqI/AAAAAAAAAIM/ryRFTeXkw5Q/s1600/cap2.PNG" alt="enter image description here" /></p>

<p>Observar el inicio del tag del <strong>xml</strong> ahora, <code>&lt;com.example.layout.modified.VerticalScrollView</code>, observar que es muy importante nombrar completamente la clase (nombre de paquete y nombre de clase) ,con esto estamos indicando que queremos usar nuestro <strong>custom ScrollView</strong> llamado <code>VerticalScrollView</code>, lo segundo es que he colocado el contenido de mi actividad dentro del nuevo <code>ScrollView</code>.</p>

<p>Con esto ya tendremos solucionado nuestro pequeño inconveniente y podremos Scrollear sobre un <code>ScrollView</code> que contiene un <code>ListView</code>.</p>

<p>Dudas a la orden, Saludos!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducción a Android Con Un Ejemplo (Y No Es HelloWorld)]]></title>
    <link href="http://ropherpanama.github.io/blog/2015/09/29/android-primer-ejemplo/"/>
    <updated>2015-09-29T11:27:28-05:00</updated>
    <id>http://ropherpanama.github.io/blog/2015/09/29/android-primer-ejemplo</id>
    <content type="html"><![CDATA[<p>Esta introducción va a ser diferente, ya que no vamos a ver como instalar ni configurar el SDK o cosas por el estilo y vamos a pasar directo a ver como luce un proyecto de android una vez creado. Además vamos a aplicar algo de programación para hacer una ventana que haga algo más que el clásico HelloWorld.</p>

<p>Primero vamos a crear un nuevo proyecto de Android: <strong>File -> New -> Android Application Project</strong> (o sus similares en español).</p>

<p>Completa los datos como los ves en la siguiente imagen, los detalles de SDK van a depender de lo que tengas instalado en tu máquina, por lo general suelo definir como SDK mínimo el 2.3, para lo demás uso lo más reciente disponible que tenga; en mi caso el Target lo he colocado API 18 y compilaré
con el API 19</p>

<!--more-->


<p><img src="http://4.bp.blogspot.com/-_4-FO8OZOYc/UzMj5-hW6KI/AAAAAAAAAIg/2uUpH37maNY/s1600/button_events_8.PNG" alt="enter image description here" /></p>

<p>Paso seguido vamos a asegurarnos de marcar las casillas que aparecen en la siguiente imagen:</p>

<p><img src="http://1.bp.blogspot.com/-lmkUUXZtaGs/UzMlcdv--JI/AAAAAAAAAJk/zbGNW0bP46M/s1600/button_events_9.PNG" alt="enter image description here" /></p>

<p>Desmarco <strong>&ldquo;Create custom launcher icon&rdquo;</strong> porque no me interesa ahora mismo crear un icono para la app.
Dejo marcada <strong>&ldquo;Create activity&rdquo;</strong> porque quiero que me genere y me configure una primera actividad (Pantalla y su controlador) que será la que editaremos más adelante. Presionamos Next</p>

<p><img src="http://3.bp.blogspot.com/-kipzblDykgY/UzMlcQzaynI/AAAAAAAAAJ4/qfYQUVlf2cU/s1600/button_events_10.PNG" alt="enter image description here" /></p>

<p>Como decidimos crear una <strong>Activity</strong> nos aparece esta pantalla, asegúrate de configurarla como en la imagen y presiona Next. En la pantalla siguiente colócale un nombre a tu activity (Activity Name), lo demás se autocompleta según lo que coloques. Presiona Finish.</p>

<p><img src="http://1.bp.blogspot.com/-S2ciCbhk_DU/UzMlcbf7flI/AAAAAAAAAJ0/Aas-vdl2PJI/s1600/button_events_11.PNG" alt="enter image description here" /></p>

<p>Después de seguidos estos pasos debes tener una estructura de proyecto como la siguiente:</p>

<p><img src="http://2.bp.blogspot.com/-KIEJi-lTiRA/UzMj8Bw0pCI/AAAAAAAAAI8/_nnl6I874hE/s1600/button_events_3.PNG" alt="enter image description here" /></p>

<p>Primero vamos a darle un vistazo al archivo llamado <strong>AndroidManifest.xml</strong></p>

<p>Hay muchas cosas que no sabrás con qué se comen, pero por ahora lo que nos interesa conocer es lo siguiente:
1.  <strong>Linea 4:</strong> es la versión de nuestra app, la podremos ir aumentando según vaya creciendo nuestra app (nuevas versiones)
2.  <strong>Lineas 13,14 y 15:</strong> Si te fijas verás que la referencia a los componentes están precedidos por un <strong>@</strong>, esto significa que son recursos de tu aplicación, estos recursos pueden ser manipulados libremente por tí para personalizar tu app a tu gusto. Dáles un vistazo presionando la tecla <strong>Ctrl + Click</strong> sobre el <strong>@</strong> de cada uno.
3.  <strong>Linea 17:</strong> De esta forma se asocia la activity (XML) con tu código Java, ves que el <strong>name del activity</strong> es el mismo de la clase que se creó en el <strong>package</strong> que definimos (es su nombre completo <strong>package + class name</strong>)
4.  <strong>Linea 19:</strong> El <code>&lt;intent-filter&gt;</code>  en este caso está indicando que nuestra única activity que tenemos, será la primera en aparecer cuando ejecutemos nuestra aplicación, esto se logra con las lineas <strong>20</strong> y <strong>22</strong>.</p>

<p><img src="http://2.bp.blogspot.com/-RIoA1LMP-RM/UzMoR3HNGnI/AAAAAAAAAKE/4EcrxOlhuXw/s1600/button_events_6.PNG" alt="enter image description here" /></p>

<p>Ahora vamos a editar los ficheros <strong>activity_button_event.xml</strong> (archivo en donde se diseña la pantalla) y su controlador <code>ButtonEventActivity.java</code> (Que vendría siendo algo asi como el <code>Listener</code> del <code>JFrame</code> en <code>Swing</code>)</p>

<p>Primero editamos el xml para que en vez de un <code>TextView</code> (algo así como el <code>JLabel</code> de <code>Swing</code>) nos muestre un <code>Button</code> (algo así como el <code>JButton</code> de <code>Swing</code>), lo haremos de esta forma:</p>

<p><img src="http://3.bp.blogspot.com/-P74H8F4n6FY/UzMoR16fKEI/AAAAAAAAAKM/k4jQDWZWqjU/s1600/button_events_4.PNG" alt="enter image description here" /></p>

<p>Primero, hemos reemplazado el <strong>Layout</strong> (similar a como se aplican layouts en <code>Swing</code>) default por un <code>LinearLayout</code>, en la <strong>linea 5</strong> vemos que la orientación es <strong>vertical</strong>, esto quiere decir que todos los componentes que vayamos agregando se irán apilando <strong>uno debajo del otro</strong>.
En la <strong>línea 12</strong> estamos creando un <code>Button</code>, con su etiqueta o texto (Ver mensaje) y sus propiedades de tamaño, <strong>fill_parent</strong> le indica al componente que debe extenderse tanto como el tamaño de su contenedor y <strong>wrap_content</strong> le indica al componente que debe ajustarse al contenido que tenga el componente, en este caso es un texto, así que se ajustará al texto para extenderse.
En la <strong>linea 16</strong> se muestra la forma que ofrece <strong>Android</strong> para manipular los eventos de los botones (es muy sencilla y practica aunque no es la única forma), si venimos programando con <strong>java SE</strong> podremos aplicar los mismos mecanismos de manejo de eventos (<code>addActionListener</code> .. etc.).</p>

<h3>¿Cómo funciona esto?</h3>

<p>Al definir en el <code>onClick</code> la etiqueta &ldquo;<code>ejecutarEvento</code>&rdquo;, debemos crear en el controlador de la pantalla (archivo <strong>.java</strong>) una función sin retorno (<strong>void</strong>) con el mismo nombre de esa etiqueta y que reciba como parámetro un <strong>View</strong>, así de sencillo.</p>

<p>Veamos el código del controlador:</p>

<p><img src="http://3.bp.blogspot.com/-MzLU7JGUS9k/UzMoR_kp9DI/AAAAAAAAAKY/QSTIGgZ06yI/s1600/button_events_5.PNG" alt="enter image description here" /></p>

<p>Las primeras 24 lineas te las debe generar el <strong>Eclipse</strong> cuando creamos el proyecto, lo nuevo y lo que debemos añadir nosotros son las <strong>líneas 29 en adelante</strong> (sin olvidar escribir los javadocs, créanme que son muy útiles para quienes tengan que revisar su código posteriormente). Como se dijo, el nombre del método es el mismo al que tiene el <code>Button</code> en el <code>onClick</code> en el XML anterior y lleva un <code>View</code> como argumento.
Lo que hace nuestro botón es mostrarnos un <code>Toast</code> (un pequeño aviso en pantalla) indicando que se ha realizado un click en el botón.</p>

<p>Ahora puedes proceder a ejecutar tu aplicación, en la medida de lo posible usar un teléfono real, ya que el emulador suele ser muy lento :)</p>

<p><strong>Debe quedar algo así:</strong></p>

<p><img src="http://1.bp.blogspot.com/-lIKGAk40dis/UzMj8I1KvkI/AAAAAAAAAJA/_VeE9Tp-z_M/s1600/button_events_1.png" alt="enter image description here" /></p>

<p><strong>Y al presionar el botón debe aparecer esto:</strong></p>

<p><img src="http://3.bp.blogspot.com/-CxQOQQd5SOw/UzMj8cJauyI/AAAAAAAAAI4/kJegpZCGRGU/s1600/button_events_2.png" alt="enter image description here" /></p>

<p>Bien, eso es todo por ahora. En el próximo punto vamos a hacer que nuestra pantalla tenga más componentes, como <code>EditText</code> (algo así como los <code>JTextField</code> de <code>Swing</code>) y que lo que escribamos en ellos pase a otra pantalla para ser procesado.
Ahí, nos leemos. <strong>Recuerda seguirme en las redes sociales</strong>. Preguntas y comentarios a la orden, saludos!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apuntes - Tuning Glassfish (Optimización Para Producción)]]></title>
    <link href="http://ropherpanama.github.io/blog/2015/09/29/tuning-de-glassfish/"/>
    <updated>2015-09-29T11:20:00-05:00</updated>
    <id>http://ropherpanama.github.io/blog/2015/09/29/tuning-de-glassfish</id>
    <content type="html"><![CDATA[<h3>Ajuste de JVM</h3>

<p>Ya que Glassfish está hecho sobre Java, muchas de las optimizaciones pueden hacerse a través de la Java Virtual Machine</p>

<p>En el fichero <code>domain.xml</code> ubicado en <code>%GLASSFISH_HOME%/glassfish/domains/&lt;DOMAIN_NAME/config</code> se deben editar los parametro <code>Xms</code> y <code>Xmx</code>, esto para reservar más memoria para el GF.</p>

<!--more-->


<p>Ubica los siguientes parámetros y modifícalos según la necesidad y capacidad del servervidor que aloja tu aplicación:</p>

<p><code>&lt;jvm-options&gt;-Xmx1024m&lt;/jvm-options&gt;</code> y <code>&lt;jvm-options&gt;-Xms1024m&lt;/jvm-options&gt;</code></p>

<p>En este caso se está asignando 1GB de RAM, ambos parámetros se colocan igual para asignar la memoria en el arranque del servicio, de esta forma no se pierde tiempo haciéndolo después.</p>

<p>Modificar la opción <code>-client</code> por <code>-server</code> de la siguiente manera, si el servidor que ejecuta el GF es 64bits entonces por default tomará la opción correcta, pero nada se pierde con “asegurarnos":<code>&lt;jvm-options&gt;-server&lt;/jvm-options&gt;</code></p>

<p>También incluir estas configuraciones <code>-Xss128k</code>, <code>-XX:+DisableExplicitGC</code>, <code>-XX:ParallelGCThreads=N</code> (en donde N es el número de CPU&rsquo;s del servidor si la cantidad es menor a 8, en caso contrario N es igual #CPU&rsquo;s/2)</p>

<p><code>-XX:+UseParallelOldGC</code></p>

<p>Si la aplicación está haciendo una gran cantidad de operaciones de E/S como escritura, también se le puede decir a <code>Grizzly</code> que utilice una estrategia asíncrona:</p>

<p><code>-Dcom.sun.grizzly.http.asyncwrite.enabled=true</code></p>

<p>Una alternativa que podría considerarse también si se está notando que algunas operaciones de escritura parecen tomar más tiempo de lo esperado.  Se puede aumentar el número de procesadores de escritura al aumentar el número Selectors NIO:</p>

<p><code>-Dcom.sun.grizzly.maxSelectors=XXX</code></p>

<p>Si la aplicación será utilizada por dispostivos móviles o a través de redes lentas puede configurar:</p>

<p><code>-Dcom.sun.grizzly.readTimeout</code>
o
<code>network-config&gt;network-listeners&gt;network-listener&gt;transport#read-timeout</code> para las operaciones read y <code>com.sun.grizzly.writeTimeout o network-config&gt;network-listeners&gt;network-listener&gt;transport#write-timeout</code> para las operaciones write.</p>

<p>Para que un hilo no bloquee otros posibles procesos de I/O durante mucho tiempo puede configurar la opción:</p>

<p><code>-Dcom.sun.grizzly.useKeepAliveAlgorithm=true</code></p>

<p>Esto le dará oportunidad de ejecución a otras peticiones.</p>

<h3>GlassFish Tuning</h3>

<p>Algunas configuraciones en el servidor de aplicaciones en sí, pueden ser las siguientes:</p>

<p>En el mismo fichero <code>domain.xml</code> modificar las siguientes opciones como se muestra a continuación:</p>

<ol>
<li>Evitemos el autodeploy y la recarga dinámica, esto toma tiempo y no es deseable, configuramos lo siguiente: <code>&lt;das-config autodeploy-enabled="false" dynamic-reload-enabled="false"&gt;&lt;/das-config&gt;</code></li>
<li>Aceptor Threads: Si se tiene por ejemplo, un servidor con 2 CPU&rsquo;s de 4 núcleos cada uno, el valor de este parámetro debe ser 8. Para configurarlo ve a la consola de administración y busca la siguiente direccion <code>Configuration -&gt; Network Config -&gt; Transports -&gt; tcp -&gt; Acceptor threads</code></li>
<li>Cacheo de recursos estáticos: <code>Configuration -&gt; Network Config -&gt; Protocols -&gt; http-listener-1 -&gt; File Cache -&gt; Enabled</code>. De tener conexiones HTTPS habilitarlo también para el listener seguro.</li>
<li>Si el servidor solo posee un Network Interface Card (NIC) reemplaza todos los valores <code>0.0.0.0</code> de  los http listeners con el IP del servidor, como se muestra <code>Configuration -&gt; Network Config -&gt; Network Listeners -&gt; &lt;listener_name&gt; -&gt; Address</code></li>
<li><p>Modificar el fichero <code>default-web.xml</code> ubicado en <code>%GLASSFISH_HOME%/glassfish/domains/&lt;DOMAIN_NAME&gt;/config</code> como se muestra:</p>

<pre><code> &lt;servlet&gt;
 &lt;servlet-name&gt;jsp&lt;/servlet-name&gt;
 &lt;servlet-class&gt;org.apache.jasper.servlet.JspServlet&lt;/servlet-class&gt;
     &lt;init-param&gt;
         &lt;param-name&gt;development&lt;/param-name&gt;
         &lt;param-value&gt;false&lt;/param-value&gt;
     &lt;/init-param&gt;
     &lt;init-param&gt;
         &lt;param-name&gt;genStrAsCharArray&lt;/param-name&gt;
         &lt;param-value&gt;true&lt;/param-value&gt;
     &lt;/init-param&gt;
     ...
 &lt;/servlet&gt;
</code></pre></li>
</ol>


<h3>Optimizaciones para JDBC</h3>

<p>Para drivers JDBC de Oracle pueden configurarse las siguientes opciones:</p>

<ul>
<li><code>ImplicitCachingEnabled=true</code></li>
<li><code>MaxStatements=200</code></li>
<li>Configurar los valores del Pool de conexiones <code>steady-pool-size</code> y <code>max-pool-size</code> con el mismo valor. Una regla general es configurar estos valores con el mismo número que se ha configurado en los <code>HTTP request processing threads</code></li>
</ul>


<p>Sobre la marcha seguimos trabajando con Glassfish (ahora en su versión 4) y estos ajustes seguro que se irán actualizando.</p>

<p>A todos un saludo!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Threads Java: Iniciarlos, Detenerlos Y Reanudarlos (Básico)]]></title>
    <link href="http://ropherpanama.github.io/blog/2015/09/27/some-awesome-title/"/>
    <updated>2015-09-27T20:51:29-05:00</updated>
    <id>http://ropherpanama.github.io/blog/2015/09/27/some-awesome-title</id>
    <content type="html"><![CDATA[<p>Bien, primero que nada explicar de que vá el asunto.</p>

<p>La idea es controlar la ejecución de un <code>Thread</code>; es decir, poder detenerlo y reanudarlo. De plano que para iniciarlo lo iniciamos en el main y que también podamos detener del todo el proceso (para no poder levantarlo más).
Explico un poco el enfoque de la solución, implementé un <code>Proceso</code> principal, este es el trabajo que debe hacer el <code>Thread</code>; simplemente consiste en imprimir un número cada cierto tiempo, un tiempo random no mayor a 5 segundos.</p>

<!--more-->


<blockquote><p>Decir que esto se ejecutará infinitamente.</p></blockquote>

<h4>Clase <code>Proceso.java</code></h4>

<pre><code>import java.util.Random;

/**
 * @author ropherpanama@gmail.com
 * Esta clase representa el proceso de trabajo; imprimir un entero cada cierto tiempo
 * se sobrescriben los metodos suspend y resume
 */
public class Proceso implements Runnable {
    private int currentCont;
    private Thread t;
    private final int sleepTime;
    boolean suspended = false;
    private String threadName;
    private boolean working = true;
    private final static Random generator = new Random();

    public Proceso(String threadName) {
        this.threadName = threadName;
        sleepTime = generator.nextInt(5000);
        currentCont = 0;
    }

    @Override
    public void run() {
        System.out.println("Running " + threadName);
        try {
            while (isWorking()) {
                System.out.println(threadName + " doing : " + currentCont);
                currentCont++;
                Thread.sleep(sleepTime);

                synchronized (this) {
                    while (suspended) {
                        wait();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void start() {
        System.out.println("Starting " + threadName);
        if (t == null) {
            t = new Thread(this, threadName);
            t.start();
        }
    }

    void suspend() {
        System.out.println("Suspending " + threadName);
        suspended = true;
    }

    synchronized void resume() {
        System.out.println("Resuming " + threadName);
        suspended = false;
        notify();
    }

    public boolean isWorking() {
        return working;
    }

    public void setWorking(boolean working) {
        this.working = working;
    }
}
</code></pre>

<p>Notar que el propio hilo se sincroniza y si se cumple que el hilo entra en estado <code>suspend</code> se llama al método <code>wait()</code>, esto provocará que el hilo se mantenga pausado hasta que alguien llame al método <code>notify();</code> que precisamente se llama en el método <code>resume()</code> y se niega que el estado del hilo es <code>suspend (suspend = false)</code>. Otro punto importante es que al tener un proceso que podría ejecutarse hasta el final de los tiempos, podríamos querer algún día detenerlo, para eso usamos el <code>while</code> con la variable <code>working</code>, que en primera instancia tendra un valor <code>true</code>.</p>

<h3>Interactuar por consola con tu Thread</h3>

<p>Lo divertido del caso era que se pudiera; mediante el teclado decirle al <code>Thread</code> lo que tenía que hacer, no simplemente escribirlo y no poder interactuar con el programa. Para eso, pensé en un &ldquo;monitor&rdquo; de entrada de teclado (<code>Thread</code> también por cierto) que en base a lo que escribas en el teclado defina el estado del <code>Thread</code> que está realizando el proceso principal. Entonces puedo escribir S (suspender), D (detener), R (reanudar) y B (salir) y con esto podré controlar los estados de mi hilo <code>Proceso</code>. Para este ejemplo simple solo estoy vigilando un solo <code>Thread</code> pero pueden ser cuantos se requieran.</p>

<h4>Clase <code>Entrada.java</code></h4>

<p>import java.util.Scanner;</p>

<pre><code>/**
 * @author ropherpanama@gmail.com
 * Esta clase esta pendiente de la entrada del usuario, la misma actua
 * como monitor de entrada por teclado y dependiendo de ello ajustara el estado
 * del Hilo al cual controla
 *
 */
public class Entrada implements Runnable {
    private Scanner sc = new Scanner(System.in);
    private String command = "";
    private Proceso p1;

    public Entrada(Proceso p1) {
        this.p1 = p1;
    }

    @Override
    public void run() {
        while (true) {
            System.out.println("Waiting input:");
            command = sc.nextLine();

            if (this.getCommand().toUpperCase().equals("S")) {
                p1.suspend();
            } else if (this.getCommand().toUpperCase().equals("R")) {
                p1.resume();
            } else if (this.getCommand().toUpperCase().equals("D")) {
                p1.setWorking(false);
                System.out.println("Fin de trabajo");
            } else if (this.getCommand().toUpperCase().equals("B")) {
                System.out.println("Saliendo");
                System.exit(0);
            } else
                System.out.println("No input");
        }
    }

    public String getCommand() {
        return command;
    }

    public void setCommand(String command) {
        this.command = command;
    }
}
</code></pre>

<p>Vemos que esta clase, al igual que <code>Proceso</code> implementa a la clase <code>Runnable</code>, por ende tambien es un <code>Thread</code>. Este hilo va a estar pendiente de lo que escribas en el teclado y según ello actuará sobre el <code>Thread</code> que este monitorizando.</p>

<h4>Vamos a probar!</h4>

<p>Ahora vamos a probar esto, creamos la clase <code>Test.java</code> que contiene el main y lo ponemos todo a interactuar.</p>

<h4>Clase <code>Test.java</code></h4>

<pre><code>public class Test {
    public static void main(String[] args) {
        Proceso p1 = new Proceso("Juana");
        p1.start();

        Entrada e = new Entrada(p1);
        Thread input = new Thread(e);
        input.start();
    }
}
</code></pre>

<p>Bien, he llamado a mi proceso principal &ldquo;Juana&rdquo; (no sé porqué) y le he dicho que inicie <code>(p1.start())</code>, luego; he creado una instancia de mi <code>Thread</code> monitor de entrada, para que vigile lo que escribo y opere sobre &ldquo;Juana&rdquo;. Notar que le paso a &ldquo;Juana&rdquo; (p1) como argumento de su constructor <code>Entrada e = new Entrada(p1);</code></p>

<p>La salida del programa es la siguiente:</p>

<pre><code>Starting Juana
Running Juana
Juana doing : 0
Waiting input:
Juana doing : 1
Juana doing : 2
Juana doing : 3
Juana doing : 4
Juana doing : 5
Juana doing : 6
Juana doing : 7
Juana doing : 8
S
Juana doing : 9

Suspending Juana
Waiting input:
R
Resuming Juana
Waiting input:
Juana doing : 10
Juana doing : 11
Juana doing : 12
Juana doing : 13
Juana doing : 14
Juana doing : 15
Juana doing : 16
B
Juana doing : 17

Saliendo
</code></pre>

<p>Juana inicio y se ejecutó, e inició a tirar sus números. Luego le dije Juana descanza un rato (S) y descanzó hasta que le dije continúa &reg;, siguió hasta el número 17 y le dije sal del programa totalmente (B)</p>

<p>Si te quedan dudas te invito a ver la video demostración en Youtube, pronto pongo el link.</p>

<p>Saludos!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java : Crear Un PDF Con iText]]></title>
    <link href="http://ropherpanama.github.io/blog/2015/09/27/mi-primer-post/"/>
    <updated>2015-09-27T19:35:05-05:00</updated>
    <id>http://ropherpanama.github.io/blog/2015/09/27/mi-primer-post</id>
    <content type="html"><![CDATA[<blockquote><p>Atención: Este proyecto puedes realizarlo con Eclipse, Netbeans, etc.</p></blockquote>

<p>En un par de pasos vamos a crear un archivo PDF en JAVA</p>

<p>Materiales:</p>

<ul>
<li> Libreria iText (<a href="http://sourceforge.net/projects/itext/files/iText/iText5.2.0/">http://sourceforge.net/projects/itext/files/iText/iText5.2.0/</a>) Para este ejemplo usé la version 5.2.0 (seguro que ya hay una más nueva)</li>
<li> Una pequeña imagen: Para este ejemplo usé una imagen en formato PNG, puede ser cualquiera.</li>
</ul>


<p>Deberás añadir las librerías de iText a tu proyecto (prueba con <a href="https://maven.apache.org/">Maven</a>), para que puedas hacer uso de las clases que se detallan aquí.</p>

<!--more-->


<p>Teniendo todo esto vamos a crear nuestro archivo.</p>

<p>Vamos a crear una clase con cualquier nombre, en mi caso yo le pondré <code>CreatePDF</code> y dentro de ella voy a crear un método llamado <code>writePDF</code>. También vamos
a colocarle un método main; el esqueleto quedaria así.</p>

<pre><code>public class CreatePDF {
    public void writePDF() {...}

    public static void main(String args[]) {
        new CreatePDF().writePDF();
    }
}
</code></pre>

<p>Luego de esto lo primero que debemos hacer es importar los Objetos que vamos a utilizar, para nuestro básico ejemplo sólo debemos añadir los siguientes:</p>

<pre><code>import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;

public class CreatePDF ...
</code></pre>

<p>Ahora bien, dentro del método <code>writePDF()</code> irá toda nuestra lógica para crear nuestro documento, vamos primero a crear un bloque <code>try/catch</code> y dentro de él colocaremos las siguientes líneas; las cuales iré explicando paso a paso.</p>

<pre><code>Document document = new Document(PageSize.LETTER, 80, 80, 50, 50);
FileOutputStream salida = new FileOutputStream("archivo.pdf");
PdfWriter writer = PdfWriter.getInstance(document, salida);
writer.setInitialLeading(0);
</code></pre>

<p>Como todo en Java debemos tener una instancia de un objeto antes de trabajar con el, por eso debemos tener una referencia a un objeto de tipo
<code>Document</code> que es quien representa nuestra hoja en blanco para escribir. Con el atributo <code>PageSize.LETTER</code> lo que le estamos indicando es que el
documento tendrá las dimesiones de un archivo en formato CARTA (sí, tambien hay para los demás estandares, investígalos), acompañando lo antes mencionado
está el valor de los márgenes de nuestro documento <code>(margenIzq, margenDer, margenArriba, margenAbajo)</code>, pueden ser los valores que gustes compañero.
Con la línea del <code>FileOutputStream</code> únicamente estamos creando físicamente nuestro archivo en disco, allí irán todos nuestros cambios al documento.
Luego necesitamos tener una instancia de quien escribirá nuestros cambios y darle su punto de inicio para que pueda escribir, <code>writer.setInitialLeading(0);</code>.</p>

<p>Hecho todo esto solo nos queda ir &ldquo;escribiendo&rdquo; dentro de nuestro papel en blanco que ya hemos preparado, vamos a añadir dos párrafos sencillos juntos a una imagen.</p>

<pre><code> Paragraph paragraph = new Paragraph();
 paragraph.add("Primera linea del documento");
 paragraph.setAlignment(Paragraph.ALIGN_CENTER);
</code></pre>

<p>Para escribir texto usamos la clase <code>Paragraph</code>, como ves tiene un método <code>add</code> en el que puedes escribir lo que desees&hellip;esta clase tiene muchos métodos interesantes, como el que vemos aquí <code>paragraph.setAlignment(Paragraph.ALIGN_CENTER)</code> que como lo
adivinaste es para alinear en donde queramos.</p>

<pre><code> Image image = Image.getInstance("imagen.png");
 image.scaleToFit(150, 150);
 image.setAlignment(Chunk.ALIGN_CENTER);
</code></pre>

<p>Para colocar imégenes debemos instanciar un objeto de tipo <code>Image</code>, darle la ubicación de nuestra imagen al constructor, darle el tamaño que gustemos y alinearla.</p>

<pre><code> Paragraph paragraph_2 = new Paragraph();
 paragraph_2.setFont(new Font(FontFactory.getFont("Courier", 12, Font.BOLD, BaseColor.ORANGE)));
 paragraph_2.add("Ultima linea del documento");
 paragraph_2.setAlignment(Paragraph.ALIGN_LEFT);
</code></pre>

<p>En este parrafo lo único que hemos hecho diferente es darle una fuente y color especifico a nuestro texto, hay otras formas de hacerlo
incluso si tienes fuentes extrañas instaladas en su carpeta Fonts de Windows puedes crear una nueva fuente a partir de esa, ya que por lo
general las fuentes &ldquo;extrañas&rdquo; no las reconoce, hagan la prueba y me comentan (si si si, tengo la solución si les llega a pasar..)</p>

<p>Antes de añadir todo nuestro contenido debemos abrir el documento para poder usarlo <code>document.open();</code> luego ir añadiendo en el orden en que queremos que aparezcan todos los checheres que hemos creado</p>

<pre><code>document.add(paragraph);
document.add(image);
document.add(paragraph_2);
</code></pre>

<p>y por lógica&hellip; si abres algo, ciérralo. <code>document.close();</code></p>

<p>Eso es todo! Luego de que lo ejecutes deberás tener en tu carpeta de proyecto tu archivo PDF.
Saludos, para dudas a la orden!!!</p>
]]></content>
  </entry>
  
</feed>
