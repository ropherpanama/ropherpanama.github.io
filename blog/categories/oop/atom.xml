<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Oop | El blog del xobi]]></title>
  <link href="http://ropherpanama.github.io/blog/categories/oop/atom.xml" rel="self"/>
  <link href="http://ropherpanama.github.io/"/>
  <updated>2015-10-08T14:06:43-05:00</updated>
  <id>http://ropherpanama.github.io/</id>
  <author>
    <name><![CDATA[Rosendo Peña Hernández]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[7 Python: Conexiones a Base De Datos]]></title>
    <link href="http://ropherpanama.github.io/blog/2015/10/08/7-python-conexiones-a-base-de-datos/"/>
    <updated>2015-10-08T13:55:17-05:00</updated>
    <id>http://ropherpanama.github.io/blog/2015/10/08/7-python-conexiones-a-base-de-datos</id>
    <content type="html"><![CDATA[<p>Una parte importante y lo más real en casi todo entorno de trabajo automatizado, es la <strong>interacción con una base de datos</strong> (sea del tipo que sea).
Para este fin <strong>Python</strong> nos ofrece una manera sencilla de trabajar con bases de datos.</p>

<!--more-->


<p>Debemos tomar en cuenta la versión de <strong>Python</strong> que estemos usando para instalar la líbreria específica para la base de datos que estemos usando.</p>

<blockquote><p>Usé Oracle XE 11g para este ejemplo</p></blockquote>

<p>Vamos a ver un programa que realiza una tarea muy común:</p>

<ol>
<li>Conectarse a una base de datos</li>
<li>Consultar una tabla</li>
<li>Exportar los resultados a un archivo de texto</li>
</ol>


<p><strong>Increíble</strong> que esto lo podamos hacer con tan pocas líneas. Y en esta ocasión colocaré imágenes en vez de texto (<strong>adiós copy/paste</strong>) hahaha, veamos qué tal.</p>

<p><img src="http://1.bp.blogspot.com/-96Wm8t-t_zM/U4-UoRMgVwI/AAAAAAAAASA/6yCkRSNbdg8/s1600/Screenshot+-+04_06_2014+,+04_48_11+p.m..png" alt="enter image description here" /></p>

<p>Vemos que en las primeras líneas estamos haciendo un <strong>import</strong> de componentes externos, en este caso tenemos que instalas el módulo <strong>cx_Oracle</strong> que nos permite trabajar con bases de datos <strong>Oracle</strong>, para casos en que uses <strong>PostgreSQL</strong>, <strong>MySQL</strong>, <strong>SQLite</strong> deberás buscar el módulo adecuado y seguir los pasos de su instalación, tomar en cuenta que los módulos de base de datos van de acuerdo a la <strong>versión de Python</strong> que estés usando.</p>

<p>Otro punto importante es notar que podemos especificar un <strong>name</strong> a nuestro gusto (<em>cx_Oracle as ora</em>) eso ayuda cuando el nombre del módulo que importamos tiene un nombre muy largo.</p>

<p>Con <strong>makedsn</strong> construimos una cadena de conexión para el método <strong>connect</strong>, vemos que el primer parámetro es el <strong>IP</strong> del servidor de la BDD, segundo el <strong>puerto</strong>, y tercero el <strong>nombre de la base de datos</strong> (SID por ejemplo).</p>

<p>Una vez teniendo el <strong>dsn</strong> nos conectamos con el <strong>user/password</strong> de la base de datos.</p>

<p>Estando conectados podemos ejecutar <strong>DML</strong> y extraer datos, en este caso volcamos los resultados a un archivo de texto llamado <strong>&ldquo;tablares.txt&rdquo;</strong></p>

<p>Al ejecutar el programa deberas ver lo siguiente:</p>

<p><img src="http://4.bp.blogspot.com/-gfnG_eVufwk/U4-Uok-NRSI/AAAAAAAAAR8/LugJRMIyqzM/s1600/Screenshot+-+04_06_2014+%252C+04_48_45+p.m..png" alt="enter image description here" /></p>

<p>En donde <em>11.2.0.1.0</em> es la versión de mi base de datos y seguido el tiempo que tomo el proceso en crear el archivo de texto con todos los registros.</p>

<p>Luego podremos ver que se ha creado el archivo de texto <strong>&ldquo;tableres.txt&rdquo;</strong></p>

<p><img src="http://1.bp.blogspot.com/-B4SyMowJlLA/U4-UoqNY8CI/AAAAAAAAASE/RLkL-p_fDA8/s1600/Screenshot+-+04_06_2014+%252C+04_49_08+p.m..png" alt="enter image description here" /></p>

<p>Espero que les ayude, ya saben que bienvenidas son las preguntas!</p>

<p>Debemos estar de acuerdo en que para ambientes productivos, realizar una tarea como esta y en esta forma puede ser vista muy <strong>&ldquo;newbie&rdquo;</strong>, es decir; no es bien visto que escribamos codigo SQL
de plano en nuestro código y tampoco que una sola clase haga todo. Es importante modularizar, <strong>Python</strong> al igual que <strong>Java</strong> nos permite crear <strong>&ldquo;paquetes&rdquo;</strong> con diferentes módulos
que pueden encapsular tareas muy particulares pero que también son repetitivas. Como sugerencia para este tipo de procesos (conexiones a base de datos), he visto que me
funciona muy bien usar un componente <strong>ORM</strong> como <a href="http://www.sqlalchemy.org/">SQLAlchemy</a></p>

<p>Un saludo!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[6 Python: Definiendo Clases]]></title>
    <link href="http://ropherpanama.github.io/blog/2015/10/08/6-python-definiendo-clases/"/>
    <updated>2015-10-08T13:50:22-05:00</updated>
    <id>http://ropherpanama.github.io/blog/2015/10/08/6-python-definiendo-clases</id>
    <content type="html"><![CDATA[<p>Para este programa vamos a ver que tal se maneja el concepto de <strong>Clase</strong> con Python, revisemos línea a línea el siguiente programa para ver a que corresponde cada una.</p>

<blockquote><p>Como siempre te invito a copiar (a mano) las lineas que no tienen <strong>#</strong> por delante, ya que como sabemos son comentarios que el compilador ignora.</p></blockquote>

<!--more-->


<p>Este programa escribirá todo lo que el usuario le envíe por consola en un archivo de texto, terminará cuando el usuario escriba <strong>Adios</strong>.</p>

<pre><code>#Una clase se define mediante la palabra clase class
class Archivo:
#Viniendo de Java lo primero que intente ubicar fue un constructor, en el caso de python, este se define como __init__, y algo muy importante es nunca olvidar
#el parametro self, de olvidarlo veras algo como "TypeError: function() takes 0 positional arguments but 1 was given".
#self viene a ser algo asi como el this de java, es decir los atributos de instancia que persisten a traves de la vida del objeto.
    def __init__(self, name, content):
        self.name = name
        self.content = content
        print("Archivo llamado ", name)

#En java tenemos la palabra private para indicar que un atributo o metodo es privado, en python esto lo podemos hacer para los metodos con un doble subrayado, 
#veremos que la forma de utilizar (llamar) estas funciones es un tanto diferente, no olvidar el parametro self
    def __escribir(self):
        t = input("Escriba &gt; ")
        self.content += "\n" + t

#Este metodo es normal, tal como lo habiamos visto en el programa 4
    def leer(self):
#Validamos el contenido del archivo antes de leerlo
        if len(self.content) == 0:
            print("Archivo no tiene contenido, escriba algo")
        else:
            print("cat " + self.name + "\n",self.content)


#Uso de la clase
#Vamos a instanciar un objeto de nuestra clase
#Recordar que arriba colocamos el metodo de inicializacion con los parametros de nombre del archivo y algo de contenido, notar que el self no debe ser cargado por 
#nosotros
a = Archivo("CV.doc", "")

#Ofrecemos las instrucciones, notar que con triple doble comilla podemos imprimir lineas tal cual como las escribimos en el fichero de fuente.
print("""Escriba:
    e para escribir
    l para leer
    bye para salir""")

#Entramos a un blucle infinito, que se encargara de interactual con el usuario 
while True:
    r = input("&gt; ")
    if r == "bye":
        print("Adios")#Si el usuario escribe Adios salimos del programa
        break
    elif r == "e":
#Observar el llamado a la funcion que definimos privada, a es el identificador de la instancia, seguido de un underline y el nombre de nuestra clase (Archivo) doble 
#subrayado y el nombre de nuestra funcion.
        a._Archivo__escribir()#Llamado a una funcion privada
    elif r == "l":
        a.leer()
    else:
        print("Opcion no valida")
</code></pre>

<p>Bueno, eso ha sido todo por hoy. Ya podemos definir clases, sabemos como instanciarlas y construir inicializadores según las necesidades de nuestro objeto.</p>

<p>Podemos acceder a funciones privadas y públicas de una clase.</p>

<p>Un saludo, bienvenidas son las preguntas!</p>
]]></content>
  </entry>
  
</feed>
