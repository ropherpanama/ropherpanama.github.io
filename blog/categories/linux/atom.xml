<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | El blog del xobi]]></title>
  <link href="http://ropherpanama.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://ropherpanama.github.io/"/>
  <updated>2015-10-08T14:06:43-05:00</updated>
  <id>http://ropherpanama.github.io/</id>
  <author>
    <name><![CDATA[Rosendo Peña Hernández]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Llamando Un Programa en Java Desde Un Programa en C]]></title>
    <link href="http://ropherpanama.github.io/blog/2015/09/29/llamar-java-desde-c/"/>
    <updated>2015-09-29T16:05:15-05:00</updated>
    <id>http://ropherpanama.github.io/blog/2015/09/29/llamar-java-desde-c</id>
    <content type="html"><![CDATA[<blockquote><p>Vamos a usar un script para Linux/Unix, prueba con Windows y un bat a ver que tal</p></blockquote>

<p>Intenté varias formas, al final me incliné por hacer un script de Unix y que éste contenga la serie de configuraciones que requiere mi programa Java; desde un programa en C, llamaremos al Script de Unix y éste llamará al programa Java.</p>

<!--more-->


<h3>Paso 1: Crear una clase</h3>

<pre><code>public class Hola
{
  public static void main(String []args)
  {
    System.out.println("I'm saying Helloooo!!!");
  }
}
</code></pre>

<h3>Paso 2: Crear un Script (lo llamaremos &ldquo;exe&rdquo;)</h3>

<pre><code>url=`which java`

$url Hola &gt; salida

if [ $? -eq 0 ]
then
   echo 'El programa se ejecuto...'
else
   echo 'El programa no se ejecuto'
fi

more salida
</code></pre>

<p>Guardar el archivo (yo le puse &ldquo;exe&rdquo;) y darle sus respectivos permisos de ejecución <code>(chmod +x exe)</code></p>

<h3>Paso 3: Crear el programa en C</h3>

<pre><code>#include &lt;stdlib.h&gt;

int main(void)
{
   int result;
   result = system("exe");
}
</code></pre>

<p>Como vemos, el programa en C ejecuta (con la función <code>system</code> ) el script <code>exe</code>, que es quién configura todo para que se ejecute nuestro programa java.</p>

<p>Compilar el programa java:</p>

<pre><code>javac Hola.java
</code></pre>

<p>Compilar el C, <strong>cc</strong> es el compilador de C por defecto en sistemas <strong>Linux</strong>:</p>

<pre><code>cc callJava.c (o el nombre que ustedes le pongan)
</code></pre>

<p>Salida de los programas:</p>

<pre><code>userhome/user/ejemplo&gt; a.out
El programa se ejecuto...
I'm saying Helloooo!!!
userhome/user/ejemplo&gt;
</code></pre>

<p>A todos un saludo!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux: Comandos Que Me Facilitan La Vida!]]></title>
    <link href="http://ropherpanama.github.io/blog/2015/09/29/comanteca-linux/"/>
    <updated>2015-09-29T11:42:53-05:00</updated>
    <id>http://ropherpanama.github.io/blog/2015/09/29/comanteca-linux</id>
    <content type="html"><![CDATA[<p>En este artículo iré colocando comandos (o secuencias de ellos) <strong>válidos para Linux</strong> que de alguna manera me saquen de un apuro o sean interesantes.</p>

<!--more-->


<ol>
<li><strong>Promedio del peso de los archivos en una carpeta, el peso se muestra en KB:</strong>
<em><em>* </em>ls -l | gawk &lsquo;{sum += $5; n++;} END {print sum/n/1024 &ldquo; KB&rdquo;}</em></li>
<li><strong>Listar archivos con su peso en KB:</strong>
<em><em>* </em>ls -lh</em></li>
<li><strong>Mostrar el total de archivos de una carpeta:</strong>
<em><em>* </em>ls | wc -l</em></li>
<li><strong>Ejecutar un comando, ver la salida por terminal y a la vez guardarla en un archivo:</strong>
<em><em>* </em>{comando} | tee salida.log</em></li>
<li><strong>Buscar archivo a partir de un directorio en sus subdirectorios:</strong>
<em><em>* </em>find . -name FILE.ext</em></li>
</ol>


<p>Esta lista se irá actualizando con más comandos útiles.
Saludos!</p>
]]></content>
  </entry>
  
</feed>
